#ifndef NGLSCENE_H_
#define NGLSCENE_H_

#include <ngl/Transformation.h>
#include "WindowParams.h"
#include "Hair.h"
#include <QOpenGLWidget>
#include <memory>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief a basic Qt GL window class for ngl demos
/// @author Jonathan Macey
/// @version 2.0
/// @date 21/01/19
/// Revision History :
/// Update for Hair Simulation 21/01/19 (not Binary day ;-( ) by Daria Kozlova
/// Initial Version 10/10/10 (Binary day ;-0 )
/// @class GLWindow
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
class NGLScene : public QOpenGLWidget
{
Q_OBJECT        // must include this if you use Qt signals/slots
public :
	//----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for GLWindow
    /// @param [in] _parent the parent window to create the GL context in
	//----------------------------------------------------------------------------------------------------------------------
    NGLScene(QWidget *_parent );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief dtor
	//----------------------------------------------------------------------------------------------------------------------
	~NGLScene();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initialize pointer to Hair Simulation
    /// @param _h pointer to the main Hair Simulation
    //----------------------------------------------------------------------------------------------------------------------
    void setHair(Hair *_h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to start Hair Simulation
    //----------------------------------------------------------------------------------------------------------------------
    void startSimulation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to stop Hair Simulation
    //----------------------------------------------------------------------------------------------------------------------
    void stopSimulation();


private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the windows params such as mouse and rotations etc
    //----------------------------------------------------------------------------------------------------------------------
    WinParams m_win;
    //----------------------------------------------------------------------------------------------------------------------
	/// @brief the timer
	//----------------------------------------------------------------------------------------------------------------------
	int m_timer;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
	//----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_view;
    ngl::Mat4 m_project;
	//----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our transformation stack used for drawing
	//----------------------------------------------------------------------------------------------------------------------
	ngl::Transformation m_transform;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the hair simulation
    //----------------------------------------------------------------------------------------------------------------------
    Hair *m_hair;
	//----------------------------------------------------------------------------------------------------------------------
    /// @brief the timer value
	//----------------------------------------------------------------------------------------------------------------------
	int m_timerValue;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief switcher to enable or disable self collision in hair simualtion
    //----------------------------------------------------------------------------------------------------------------------
    bool enableSimulation = false;

protected:

	//----------------------------------------------------------------------------------------------------------------------
    /// @brief  The following methods must be implimented in the sub class
    /// this is called when the window is created
	//----------------------------------------------------------------------------------------------------------------------
    void initializeGL();

	//----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called whenever the window is re-sized
    /// @param[in] _w the width of the resized window
    /// @param[in] _h the height of the resized window
	//----------------------------------------------------------------------------------------------------------------------
	void resizeGL(int _w , int _h);
	//----------------------------------------------------------------------------------------------------------------------
    /// @brief this is the main gl drawing routine which is called whenever the window needs to
    /// be re-drawn
	//----------------------------------------------------------------------------------------------------------------------
  void paintGL();

private :
	//----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mouseMoveEvent ( QMouseEvent * _event );
	//----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mousePressEvent ( QMouseEvent *_event );

	//----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mouseReleaseEvent (QMouseEvent *_event );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief timer event trigered by startTimer
	//----------------------------------------------------------------------------------------------------------------------
	void timerEvent(QTimerEvent *_event	);
	void loadMatricesToShader();
	void loadMatricesToColourShader();

};

#endif
